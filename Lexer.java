/* The following code was generated by JFlex 1.7.0 */

import java.util.ArrayList;
import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/maris/Desktop/CS 4110/Project 2/spec.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {
	

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;
	private static final String ZZ_NL = System.getProperty("line.separator");

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int COMMENT = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 
			0,  0,  1, 1
	};

	/** 
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = 
			"\10\0\2\3\1\5\1\51\1\51\1\4\22\0\1\3\1\36\1\7"+
					"\2\0\1\32\1\37\1\0\1\43\1\44\1\11\1\31\1\42\1\20"+
					"\1\16\1\10\1\13\11\2\1\0\1\41\1\33\1\34\1\35\2\0"+
					"\1\25\3\15\1\17\1\24\5\1\1\26\5\1\1\22\1\30\1\21"+
					"\1\23\2\1\1\14\2\1\1\45\1\6\1\46\1\0\1\12\1\0"+
					"\1\25\3\15\1\17\1\24\5\1\1\26\5\1\1\22\1\30\1\21"+
					"\1\23\2\1\1\14\2\1\1\47\1\40\1\50\7\0\1\51\371\0"+
					"\1\27\u1ea8\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

	/** 
	 * Translates characters to character classes
	 */
	private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/** 
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
					"\1\10\1\3\1\11\1\12\2\2\1\13\1\14\1\15"+
					"\1\16\1\17\1\20\2\1\1\21\1\22\1\23\1\24"+
					"\1\25\1\26\1\27\1\30\2\4\1\5\2\1\1\31"+
					"\1\6\1\32\1\4\1\33\1\0\2\2\1\34\1\35"+
					"\1\36\1\37\1\40\1\41\2\0\1\4\1\42\1\43"+
					"\1\4\1\0\1\6\1\0\1\32\1\3\2\2\1\31"+
					"\1\0\1\44\1\0\1\44";

	private static int [] zzUnpackAction() {
		int [] result = new int[68];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/** 
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
					"\0\u0150\0\124\0\u017a\0\124\0\124\0\u01a4\0\u01ce\0\124"+
					"\0\124\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\124"+
					"\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\u02f4"+
					"\0\u031e\0\124\0\u0348\0\u0372\0\u039c\0\u03c6\0\124\0\u03f0"+
					"\0\124\0\u041a\0\u0444\0\u046e\0\124\0\124\0\124\0\124"+
					"\0\124\0\124\0\u0498\0\u04c2\0\u04ec\0\124\0\124\0\u0516"+
					"\0\u0540\0\u056a\0\u0594\0\u0126\0\u041a\0\u05be\0\u05e8\0\u0612"+
					"\0\u0612\0\176\0\u063c\0\124";

	private static int [] zzUnpackRowMap() {
		int [] result = new int[68];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/** 
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\3\1\4\1\5\1\6\1\7\1\6\1\3\1\10"+
					"\1\11\1\12\1\3\1\13\2\4\1\14\1\4\1\15"+
					"\1\16\2\4\1\17\2\4\1\3\1\4\1\20\1\21"+
					"\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
					"\1\32\1\33\1\34\1\35\1\36\1\37\1\0\4\40"+
					"\1\41\1\42\2\40\1\43\1\44\40\40\53\0\2\4"+
					"\7\0\4\4\1\0\1\4\1\0\6\4\1\0\1\4"+
					"\23\0\1\5\10\0\1\5\2\0\1\45\36\0\1\6"+
					"\1\0\1\6\51\0\1\42\44\0\4\10\2\0\1\46"+
					"\1\47\42\10\10\0\1\50\1\51\42\0\1\5\10\0"+
					"\1\5\1\52\1\0\1\45\34\0\2\4\7\0\4\4"+
					"\1\0\1\4\1\0\1\4\1\53\4\4\1\0\1\4"+
					"\22\0\2\4\7\0\4\4\1\0\1\4\1\0\4\4"+
					"\1\54\1\4\1\0\1\4\55\0\1\55\51\0\1\56"+
					"\51\0\1\57\51\0\1\60\54\0\1\61\52\0\1\62"+
					"\11\0\5\40\1\0\2\40\1\63\1\64\45\40\1\42"+
					"\2\40\1\63\1\64\45\40\1\0\2\40\1\65\1\66"+
					"\45\40\1\0\2\40\1\67\1\70\40\40\2\0\1\45"+
					"\10\0\1\45\3\0\1\71\32\0\3\10\1\72\2\73"+
					"\1\46\1\74\42\10\4\50\2\0\43\50\3\0\1\75"+
					"\10\0\1\75\1\0\1\75\1\0\1\75\4\0\2\75"+
					"\25\0\2\4\7\0\4\4\1\0\1\4\1\0\2\4"+
					"\1\76\3\4\1\0\1\4\22\0\2\4\7\0\4\4"+
					"\1\0\1\4\1\0\5\4\1\77\1\0\1\4\21\0"+
					"\5\40\1\0\2\40\1\65\1\0\45\40\1\0\2\40"+
					"\1\0\1\70\45\40\1\0\2\40\1\65\1\64\45\40"+
					"\1\0\2\40\1\63\1\70\40\40\2\0\1\100\10\0"+
					"\1\100\4\0\1\101\10\0\1\101\20\0\3\10\1\72"+
					"\2\73\1\46\1\47\42\10\3\0\3\73\1\10\44\0"+
					"\2\4\7\0\4\4\1\0\1\102\1\0\6\4\1\0"+
					"\1\4\22\0\2\4\7\0\4\4\1\0\1\4\1\0"+
					"\6\4\1\103\1\76\23\0\1\100\10\0\1\100\55\0"+
					"\1\104\32\0";

	private static int [] zzUnpackTrans() {
		int [] result = new int[1638];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\2\0\1\11\6\1\1\11\1\1\2\11\2\1\2\11"+
					"\6\1\10\11\2\1\1\11\4\1\1\11\1\1\1\11"+
					"\1\0\2\1\6\11\2\0\1\1\2\11\1\1\1\0"+
					"\1\1\1\0\5\1\1\0\1\1\1\0\1\11";

	private static int [] zzUnpackAttribute() {
		int [] result = new int[68];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/** this buffer contains the current text to be matched and is
      the source of the yytext() string */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** endRead marks the last character in the buffer, that has been read
      from input */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the 
	 * matched text
	 */
	private int yycolumn;

	/** 
	 * zzAtBOL == true iff the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true iff the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/** 
	 * The number of occupied positions in zzBuffer beyond zzEndRead.
	 * When a lead/high surrogate has been read from the input stream
	 * into the final zzBuffer position, this will have a value of 1;
	 * otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */
	private int comment_count = 0;
	private ArrayList<String> tokens = new ArrayList<>();
	String keywords[]= {"boolean", "break", "class", "double","else", "extends", "false", "for", "if", "implements", "int", "interface", "new", "newarray", "null", "println", "readln", "return", "string", "true", "void", "while"};
	Trie trie = new Trie();
	private static String fileName;


	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	Lexer(java.io.Reader in,String fileName) {
		for (int i=0;i<keywords.length;i++) {
			trie.addKeyword(keywords[i]);
		}	
		this.zzReader = in;
		this.fileName = fileName;
		this.fileName = this.fileName.substring(0, fileName.length() - 4);
		this.fileName = this.fileName.concat("_out.txt");
	}


	/** 
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed   the packed character translation table
	 * @return         the unpacked character translation table
	 */
	private static char [] zzUnpackCMap(String packed) {
		char [] map = new char[0x110000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 182) {
			int  count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	private static String zzToPrintable(String str) {
		StringBuilder builder = new StringBuilder();
		for (int n = 0 ; n < str.length() ; ) {
			int ch = str.codePointAt(n);
			int charCount = Character.charCount(ch);
			n += charCount;
			if (ch > 31 && ch < 127) {
				builder.append((char)ch);
			} else if (charCount == 1) {
				builder.append(String.format("\\u%04X", ch));
			} else {
				builder.append(String.format("\\U%06X", ch));
			}
		}
		return builder.toString();
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 * 
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead-zzStartRead);

			/* translate stored positions */
			zzEndRead-= zzStartRead;
			zzCurrentPos-= zzStartRead;
			zzMarkedPos-= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length*2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			/* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		setZzAtEOF(true);            /* indicate end of file */
		zzEndRead = zzStartRead;  /* invalidate buffer    */

		if (zzReader != null)
			zzReader.close();
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL  = true;
		setZzAtEOF(false);
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the 
	 * matched text. 
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. 
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead+pos];
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of 
	 * yypushback(int) and a match-all fallback rule) this method 
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	} 


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {

		if (!zzEOFDone) {
			zzEOFDone = true;
			try {
				FileWriter fileWriter = new FileWriter(fileName);
				BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
				boolean _newline = true;
				System.out.println("\n");
				for (int i = 0; i < tokens.size(); i++) {
					if (!_newline) {
						System.out.print(" ");
						bufferedWriter.write(" ");
					}
					if (_newline && tokens.get(i).equals("\n")) {
						continue;
					}
					System.out.print(tokens.get(i));
					bufferedWriter.write(tokens.get(i));
					if (tokens.get(i).equals("\n")) {
						_newline = true;
					} else {
						_newline = false;
					}
				} 
			}
			catch (IOException ex) {
				System.out.println("Error writing to file " + fileName);

				System.out.println("");


			}
			//trie.printTable();
			yyclose();
		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	public Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char [] zzBufferL = zzBuffer;
		char [] zzCMapL = ZZ_CMAP;

		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead  ;
					zzCurrentPosL < zzMarkedPosL ;
					zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
				case '\u000B':  // fall through
				case '\u000C':  // fall through
				case '\u0085':  // fall through
				case '\u2028':  // fall through
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (isZzAtEOF())
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) 
						zzPeek = false;
					else 
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
			}


			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (isZzAtEOF()) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos  = zzCurrentPosL;
						zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = zzCurrentPos;
						zzMarkedPosL   = zzMarkedPos;
						zzBufferL      = zzBuffer;
						zzEndReadL     = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;
			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				setZzAtEOF(true);
				//zzDoEOF();
				{ return new java_cup.runtime.Symbol(sym.EOF); }
			}
			else {
				/*if (!yytext().equals(" ") && !yytext().equals("\n") && !yytext().equals("\t") )
					System.out.print(yytext()+" ");
				*/
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 1: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [250] { //System.out.println(\"Illegal character: <\" + yytext() + \">\");"+ZZ_NL+"\tUtility.error(Utility.E_UNMATCHED); }");
				{ System.out.println("Illegal character: <" + yytext() + ">");
				Utility.error(Utility.E_UNMATCHED);
				} 
				// fall through
				case 37: break;
				case 2: 
					//System.out.printlnne: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [168] { String t = yytext();"+ZZ_NL+"  \tif (t.equals(\"boolean\")) {"+ZZ_NL+"  \t\ttokens.add(\"boolean\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._boolean,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"break\")) {"+ZZ_NL+"\t\ttokens.add(\"break\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._break,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"class\")) {"+ZZ_NL+"\t\ttokens.add(\"class\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._class,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"double\")) {"+ZZ_NL+"\t\ttokens.add(\"double\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._double,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"else\")) {"+ZZ_NL+"\t\ttokens.add(\"else\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._else,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"extends\")) {"+ZZ_NL+"\t\ttokens.add(\"extends\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._extends,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"for\")) {"+ZZ_NL+"\t\ttokens.add(\"for\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._for,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"if\")) {"+ZZ_NL+"\t\ttokens.add(\"if\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._if,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"implements\")) {"+ZZ_NL+"\t\ttokens.add(\"implements\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._implements,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"int\")) {"+ZZ_NL+"\t\ttokens.add(\"int\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._int,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"interface\")) {"+ZZ_NL+"\t\ttokens.add(\"interface\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._interface,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"new\")) {"+ZZ_NL+"\t\ttokens.add(\"new\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._new,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"newarray\")) {"+ZZ_NL+"\t\ttokens.add(\"newarray\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._newarray,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"null\")) {"+ZZ_NL+"\t\ttokens.add(\"null\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._null,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"println\")) {"+ZZ_NL+"\t\ttokens.add(\"println\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._println,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"readln\")) {"+ZZ_NL+"\t\ttokens.add(\"readln\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._readln,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"return\")) {"+ZZ_NL+"\t\ttokens.add(\"return\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._return,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"string\")) {"+ZZ_NL+"\t\ttokens.add(\"string\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._string,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"void\")) {"+ZZ_NL+"\t\ttokens.add(\"void\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._void,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else if (t.equals(\"while\")) {"+ZZ_NL+"\t\ttokens.add(\"while\");"+ZZ_NL+"  \t\treturn (new Symbol(sym._while,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} else {"+ZZ_NL+"  \t\ttokens.add(\"id\");"+ZZ_NL+"  \t\ttrie.addIdentifier(t);"+ZZ_NL+"  \t  \treturn (new Symbol(sym._id,yychar,yychar + yytext().length(), yytext()));"+ZZ_NL+"  \t} }");
				{ String t = yytext();
				if (t.equals("boolean")) {
					tokens.add("boolean");
					return (new Symbol(sym._boolean,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("break")) {
					tokens.add("break");
					return (new Symbol(sym._break,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("class")) {
					tokens.add("class");
					return (new Symbol(sym._class,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("double")) {
					tokens.add("double");
					return (new Symbol(sym._double,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("else")) {
					tokens.add("else");
					return (new Symbol(sym._else,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("extends")) {
					tokens.add("extends");
					return (new Symbol(sym._extends,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("for")) {
					tokens.add("for");
					return (new Symbol(sym._for,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("if")) {
					tokens.add("if");
					return (new Symbol(sym._if,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("implements")) {
					tokens.add("implements");
					return (new Symbol(sym._implements,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("int")) {
					tokens.add("int");
					return (new Symbol(sym._int,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("interface")) {
					tokens.add("interface");
					return (new Symbol(sym._interface,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("new")) {
					tokens.add("new");
					return (new Symbol(sym._new,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("newarray")) {
					tokens.add("newarray");
					return (new Symbol(sym._newarray,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("null")) {
					tokens.add("null");
					return (new Symbol(sym._null,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("println")) {
					tokens.add("println");
					return (new Symbol(sym._println,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("readln")) {
					tokens.add("readln");
					return (new Symbol(sym._readln,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("return")) {
					tokens.add("return");
					return (new Symbol(sym._return,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("string")) {
					tokens.add("string");
					return (new Symbol(sym._string,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("void")) {
					tokens.add("void");
					return (new Symbol(sym._void,yychar,yychar + yytext().length(), yytext()));
				} else if (t.equals("while")) {
					tokens.add("while");
					return (new Symbol(sym._while,yychar,yychar + yytext().length(), yytext()));
				} else {
					tokens.add("id");
					trie.addIdentifier(t);
					return (new Symbol(sym._id,yychar,yychar + yytext().length(), yytext()));
				}
				} 
				// fall through
				case 38: break;
				case 3: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [148] { tokens.add(\"intconstant\");"+ZZ_NL+"  \treturn (new Symbol(sym._intconstant,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("intconstant");
				return (new Symbol(sym._intconstant,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 39: break;
				case 4: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [131] {  }");
				{ 
				} 
				// fall through
				case 40: break;
				case 5: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [246] { tokens.add(\"\\n\"); }");
				{ tokens.add("\n");
				} 
				// fall through
				case 41: break;
				case 6: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [142] { String str =  yytext().substring(1,yytext().length());"+ZZ_NL+"    Utility.error(Utility.E_UNCLOSEDSTR);"+ZZ_NL+"    return (new Symbol(sym.error,str,yyline,yychar,yychar + str.length())); }");
				{ String str =  yytext().substring(1,yytext().length());
				Utility.error(Utility.E_UNCLOSEDSTR);
				return (new Symbol(sym.error,yychar,yychar + str.length(), str));
				} 
				// fall through
				case 42: break;
				case 7: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [87] { tokens.add(\"division\"); "+ZZ_NL+"  \treturn (new Symbol(sym._division,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("division"); 
				return (new Symbol(sym._division,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 43: break;
				case 8: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [85] { tokens.add(\"multiplication\"); "+ZZ_NL+"  \treturn (new Symbol(sym._multiplication,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("multiplication"); 
				return (new Symbol(sym._multiplication,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 44: break;
				case 9: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [115] { tokens.add(\"period\");"+ZZ_NL+"  \treturn (new Symbol(sym._period,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("period");
				return (new Symbol(sym._period,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 45: break;
				case 10: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [83] { tokens.add(\"minus\");"+ZZ_NL+"  \treturn (new Symbol(sym._minus,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("minus");
				return (new Symbol(sym._minus,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 46: break;
				case 11: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [81] { tokens.add(\"plus\");"+ZZ_NL+"  \treturn (new Symbol(sym._plus,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("plus");
				return (new Symbol(sym._plus,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 47: break;
				case 12: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [89] { tokens.add(\"mod\"); "+ZZ_NL+"  \treturn (new Symbol(sym._mod,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("mod"); 
				return (new Symbol(sym._mod,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 48: break;
				case 13: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [91] { tokens.add(\"less\");"+ZZ_NL+"  \treturn (new Symbol(sym._less,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("less");
				return (new Symbol(sym._less,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 49: break;
				case 14: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [109] { tokens.add(\"assignop\");"+ZZ_NL+"  \treturn (new Symbol(sym._assignop,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("assignop");
				return (new Symbol(sym._assignop,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 50: break;
				case 15: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [95] { tokens.add(\"greater\");"+ZZ_NL+"  \treturn (new Symbol(sym._greater,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("greater");
				return (new Symbol(sym._greater,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 51: break;
				case 16: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [107] { tokens.add(\"not\");"+ZZ_NL+"  \treturn (new Symbol(sym._not,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("not");
				return (new Symbol(sym._not,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 52: break;
				case 17: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [111] { tokens.add(\"semicolon\");"+ZZ_NL+"  \treturn (new Symbol(sym._semicolon,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("semicolon");
				return (new Symbol(sym._semicolon,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 53: break;
				case 18: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [113] { tokens.add(\"comma\");"+ZZ_NL+"  \treturn (new Symbol(sym._comma,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("comma");
				return (new Symbol(sym._comma,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 54: break;
				case 19: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [117] { tokens.add(\"leftparen\");"+ZZ_NL+"  \treturn (new Symbol(sym._leftparen,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("leftparen");
				return (new Symbol(sym._leftparen,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 55: break;
				case 20: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [119] { tokens.add(\"rightparen\");"+ZZ_NL+"  \treturn (new Symbol(sym._rightparen,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("rightparen");
				return (new Symbol(sym._rightparen,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 56: break;
				case 21: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [121] { tokens.add(\"leftbracket\");"+ZZ_NL+"  \treturn (new Symbol(sym._leftbracket,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("leftbracket");
				return (new Symbol(sym._leftbracket,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 57: break;
				case 22: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [123] { tokens.add(\"rightbracket\");"+ZZ_NL+"  \treturn (new Symbol(sym.rightbracket,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("rightbracket");
				return (new Symbol(sym._rightbracket,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 58: break;
				case 23: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [125] { tokens.add(\"leftbrace\");"+ZZ_NL+"  \treturn (new Symbol(sym._leftbrace,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("leftbrace");
				return (new Symbol(sym._leftbrace,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 59: break;
				case 24: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [127] { tokens.add(\"rightbrace\");"+ZZ_NL+"  \treturn (new Symbol(sym._rightbrace,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("rightbrace");
				return (new Symbol(sym._rightbrace,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 60: break;
				case 25: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [158] { tokens.add(\"doubleconstant\");"+ZZ_NL+"  \treturn (new Symbol(sym._doubleconstant,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("doubleconstant");
				return (new Symbol(sym._doubleconstant,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 61: break;
				case 26: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [136] { tokens.add(\"stringconstant\");"+ZZ_NL+"    String str =  yytext().substring(1,yylength()-1);"+ZZ_NL+"    return (new Symbol(sym._stringconstant,str,yyline,yychar,yychar+yylength())); }");
				{ tokens.add("stringconstant");
				String str =  yytext().substring(1,yylength()-1);
				return (new Symbol(sym._stringconstant,yychar,yychar + str.length(), str));
				} 
				// fall through
				case 62: break;
				case 27: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [133] { yybegin(COMMENT); comment_count++; }");
				{ yybegin(COMMENT); comment_count++;
				} 
				// fall through
				case 63: break;
				case 28: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [93] { tokens.add(\"lessequal\");"+ZZ_NL+"  \treturn (new Symbol(sym._lessequal,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("lessequal");
				return (new Symbol(sym._lessequal,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 64: break;
				case 29: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [99] { tokens.add(\"equal\");"+ZZ_NL+"  \treturn (new Symbol(sym._equal,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("equal");
				return (new Symbol(sym._equal,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 65: break;
				case 30: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [97] { tokens.add(\"greaterequal\");"+ZZ_NL+"  \treturn (new Symbol(sym._greaterequal,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("greaterequal");
				return (new Symbol(sym._greaterequal,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 66: break;
				case 31: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [101] { tokens.add(\"notequal\");"+ZZ_NL+"  \treturn (new Symbol(sym._notequal,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("notequal");
				return (new Symbol(sym._notequal,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 67: break;
				case 32: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [103] { tokens.add(\"and\");"+ZZ_NL+"  \treturn (new Symbol(sym._and,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("and");
				return (new Symbol(sym._and,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 68: break;
				case 33: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [105] { tokens.add(\"or\");"+ZZ_NL+"  \treturn (new Symbol(sym._or,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("or");
				return (new Symbol(sym._or,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 69: break;
				case 34: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [240] { comment_count++; }");
				{ comment_count++;
				} 
				// fall through
				case 70: break;
				case 35: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [241] { if (--comment_count == 0) yybegin(YYINITIAL); }");
				{ if (--comment_count == 0) yybegin(YYINITIAL);
				} 
				// fall through
				case 71: break;
				case 36: 
					//System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
					//System.out.println("action [163] { tokens.add(\"booleanconstant\");"+ZZ_NL+"  \treturn (new Symbol(sym._booleanconstant,yychar,yychar + yytext().length(), yytext())); }");
				{ tokens.add("booleanconstant");
				return (new Symbol(sym._booleanconstant,yychar,yychar + yytext().length(), yytext()));
				} 
				// fall through
				case 72: break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Runs the scanner on input files.
	 *
	 * This main method is the debugging routine for the scanner.
	 * It prints debugging information about each returned token to
	 * System.out until the end of file is reached, or an error occured.
	 *
	 * @param argv   the command line, contains the filenames to run
	 *               the scanner on.
	 */
	public static void main(String argv[]) {
		if (argv.length == 0) {
			System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
		}
		else {
	
			int firstFilePos = 0;
			String encodingName = "UTF-8";
			if (argv[0].equals("--encoding")) {
				firstFilePos = 2;
				encodingName = argv[1];
				try {
					java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
				} catch (Exception e) {
					System.out.println("Invalid encoding '" + encodingName + "'");
					return;
				}
			}
			for (int i = firstFilePos; i < argv.length; i++) {
				Lexer scanner = null;
				try {
					java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
					java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
					scanner = new Lexer(reader,argv[i]);
					do {
						//System.out.println(scanner.next_token());
						scanner.next_token();
					} while (!scanner.isZzAtEOF());

				}
				catch (java.io.FileNotFoundException e) {
					System.out.println("File not found : \""+argv[i]+"\"");
				}
				catch (java.io.IOException e) {
					System.out.println("IO error scanning file \""+argv[i]+"\"");
					System.out.println(e);
				}
				catch (Exception e) {
					System.out.println("Unexpected exception:");
					e.printStackTrace();
				}
			}
		}
	}

	public boolean isZzAtEOF() {
		return zzAtEOF;
	}

	public void setZzAtEOF(boolean zzAtEOF) {
		this.zzAtEOF = zzAtEOF;
	}


}
